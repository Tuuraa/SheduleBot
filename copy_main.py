import telebot
import Markups
import datetime
import PersonsList
import Used_valiables
from markups_obj import Person
import Common_markups


Token = "5656238548:AAGjSpVQVoYdtFZ8XelLzFEBjqTBkhI7ask"
bot = telebot.TeleBot(token=Token)

list_id_persons = []
now_person = Person(12, "any")

@bot.message_handler(commands=["start"])
def start(message):
    print(message.text)
    check = False
    for i in list_id_persons:
        if i.id_person == message.chat.id:
            global now_person
            now_person = i
            check = True
            break

    if not check:
        new_person = Person(message.chat.id, message.text)
        list_id_persons.append(new_person)
        now_person = new_person

    bot.send_message(message.chat.id,
            text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –í—É–∑–µ –ö—É–±–ì–¢–£".format(message.from_user),
            reply_markup=Common_markups.get_start_board())


@bot.message_handler(func=lambda message: (message.text in now_person.groups_for_gors
                                          or message.text in Used_valiables.days_for_schedule
                                          or message.text in Used_valiables.days
                                          or message.text in Used_valiables.weeks)
                                          and not now_person.check_add_schedule
                                          and not now_person.view_schedule)

def get_schedule(message):

    if message.text in now_person.groups_for_gors:
            now_person.group_for_schedule_today = message.text
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", reply_markup=Common_markups.get_start_for_person_schedule())

    elif message.text == "–°–µ–≥–æ–¥–Ω—è":
            week = int(datetime.datetime.utcnow().isocalendar()[1])
            x = "–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è" if week % 2 == 0 else "–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
            day = int(datetime.datetime.utcnow().isocalendar()[2])
            bot.send_message(message.chat.id,
                             now_person.get_schedule_for_group("", group_for_check=now_person.group_for_schedule_today, dateToday=Used_valiables.days[day-1], isScheduleToday=True, num_week=x),
                             reply_markup=Common_markups.get_start_for_person_schedule())

    elif message.text == "–ó–∞–≤—Ç—Ä–∞":
            day_numb = datetime.datetime.weekday(datetime.datetime.now()) % 6
            day = int(datetime.datetime.utcnow().isocalendar()[2]) % 6
            week = int(datetime.datetime.utcnow().isocalendar()[1])
            x = "–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è" if week % 2 == 0 else "–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
            bot.send_message(message.chat.id,
                             now_person.get_schedule_for_group("", group_for_check=now_person.group_for_schedule_today, dateToday=Used_valiables.days[day], isScheduleToday=True, num_week=x),
                             reply_markup=Common_markups.get_start_for_person_schedule())

    elif message.text == "–ü–æ—Ç–æ–º":
            week = int(datetime.datetime.utcnow().isocalendar()[1])
            x = "–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è" if week % 2 == 0 else "–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
            bot.send_message(message.chat.id, "–ù–µ–¥–µ–ª—é", reply_markup=now_person.get_even_number_of_week(message.text, isShedule=False))
            bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å {x.lower()}")

    elif str(message.text) in Markups.weeks:
            bot.send_message(message.chat.id, "–î–Ω–∏", reply_markup=now_person.get_day_of_week(message.text, isShedule=False))

    elif str(message.text) in Markups.days:
            bot.send_message(message.chat.id,
                             now_person.get_schedule_for_group("", group_for_check=now_person.group_for_schedule_today,
                                                            dateToday=message.text, isScheduleToday=True,
                                                            num_week=now_person.number_week),
                                                            reply_markup=now_person.get_day_of_week(now_person.number_week, isShedule=False))

@bot.message_handler(func=lambda message: (message.text in PersonsList.list_message
                                          or message.text in Used_valiables.facults
                                          or message.text in now_person.groups
                                          or str(message.text).isdigit()
                                          or message.text in PersonsList.sure)
                                          and now_person.check_add_schedule
                                          and not now_person.view_schedule)

def login(message):

    if not now_person.check_add_schedule:
        func(message)

    elif message.text in Markups.facults:
            now_person.facult_name_for_add = message.text
            bot.send_message(message.chat.id,
                             PersonsList.list_message[1], reply_markup=now_person.get_kurses_of_facult(message.text))

    elif str(message.text).isdigit():
            now_person.kurs_for_add = message.text
            bot.send_message(message.chat.id,
                             PersonsList.list_message[2], reply_markup=now_person.get_groups_of_facult(message.text))

    elif message.text in now_person.groups:
            now_person.group_for_add = message.text
            bot.send_message(message.chat.id,
                             PersonsList.list_message[3], reply_markup=PersonsList.add_sure())

    elif message.text in PersonsList.sure:
        bot.send_message(message.chat.id, now_person.get_new_personal_schedule(message.chat.id), reply_markup=Common_markups.get_markup_table(False))


@bot.message_handler(content_types=['text'])
def func(message):

    print(message.text)
    check = False
    for i in list_id_persons:
        if i.id_person == message.chat.id:
            global now_person
            now_person = i
            check = True
            break

    if not check:
        new_person = Person(message.chat.id, message.text)
        list_id_persons.append(new_person)
        now_person = new_person

    if message.text == "üéì –í—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç–∏—Ç—É—Ç":
        now_person.view_schedule = True
        mes = now_person.get_all_facults(True)
        bot.send_message(message.chat.id, "–í—Å–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã", reply_markup=mes)

    elif message.text == "‚ùì –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π":
        #bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ,–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        #bot.send_contact(message.chat.id, "+79897898328", "Artur", "Kardanov")

    elif message.text in Used_valiables.facults:
        bot.send_message(message.chat.id, "–ö—É—Ä—Å—ã", reply_markup=now_person.get_kurses_of_facult(message.text))

    elif message.text in now_person.groups:
        bot.send_message(message.chat.id, "–ß–µ—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", reply_markup=now_person.get_even_number_of_week(message.text))
        week = int(datetime.datetime.utcnow().isocalendar()[1])
        x = "–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è" if week % 2 == 0 else "–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
        bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å {x.lower()}")

    elif message.text == "üìö –ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
        now_person.check_veiw = True
        bot.send_message(message.chat.id, "–ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                     reply_markup=now_person.get_my_schedule(message.chat.id))

    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        now_person.check_add_schedule = True
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞", reply_markup=Markups.get_all_inst())

    elif str(message.text).isdigit():
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø—ã", reply_markup=now_person.get_groups_of_facult(message.text))

    elif str(message.text) in Used_valiables.weeks:
        bot.send_message(message.chat.id, "–î–Ω–∏", reply_markup=now_person.get_day_of_week(message.text))

    elif str(message.text) in Used_valiables.days:
        bot.send_message(message.chat.id, now_person.get_schedule_for_group(message.text))
        bot.send_message(message.chat.id, "", reply_markup=Common_markups.get_markup_table())

    elif message.text == "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º":
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª—Å—è –∫ –≥—Ä—É–ø–ø–∞–º", reply_markup=now_person.remove_groups())

    elif message.text == "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–¥–µ–ª—è–º":
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–µ–¥–µ–ª–µ", reply_markup=Common_markups.get_number_of_week_schedule_for_group_for_back())

    elif message.text == "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å—É":
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª—Å—è –∫ –∫—É—Ä—Å–∞–º", reply_markup=Common_markups.get_kurses_of_facult_for_back())

    elif message.text == "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º":
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª—Å—è –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º", reply_markup=now_person.get_all_facults())

    elif message.text == "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É":
        now_person.view_schedule = False
        now_person.check_veiw = False
        past = Common_markups.get_start_board()
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–∞—á–∞–ª—É", reply_markup=past)


bot.polling(none_stop=True, interval=0)
